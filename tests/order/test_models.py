import re
from typing import Required
from typing import TypedDict

import pytest
from pydantic import ValidationError

from core.order.models import OrderLine
from core.utils.default_factories import get_hex_uuid4
from tests.conftest import ErrorDetailsModel
from tests.conftest import dependency


class Kwargs(TypedDict):
    id: Required[str]
    product_name: Required[str]
    ordered_quantity: Required[int]


kwargs = Kwargs(
    id=get_hex_uuid4(),
    product_name='SMALL-CHAIR',
    ordered_quantity=1,
)


class TestBase:
    @dependency()
    def test_id_autogenerated(self):
        order = OrderLine(
            product_name=kwargs['product_name'],
            ordered_quantity=kwargs['ordered_quantity'],
        )
        assert re.fullmatch(r'[a-z\d]{32}', order.id)
        assert order.product_name == kwargs['product_name']
        assert order.ordered_quantity == kwargs['ordered_quantity']

    @dependency()
    def test_product_name_cant_be_empty_str(self):
        with pytest.raises(ValidationError) as error:
            OrderLine(
                id=kwargs['id'],
                product_name='',
                ordered_quantity=kwargs['ordered_quantity'],
            )
        errors = ErrorDetailsModel.make(error.value.errors(include_url=False))
        assert len(errors) == 1
        assert errors[0].loc == ('product_name',)
        assert errors[0].type == 'string_too_short'
        assert errors[0].ctx == {'min_length': 1}
        assert errors[0].msg == 'String should have at least 1 character'

    @dependency()
    def test_ordered_quantity_must_be_gt_0(self):
        with pytest.raises(ValidationError) as error:
            OrderLine(
                id=kwargs['id'],
                product_name=kwargs['product_name'],
                ordered_quantity=0,
            )
        errors = ErrorDetailsModel.make(error.value.errors(include_url=False))
        assert len(errors) == 1
        assert errors[0].loc == ('ordered_quantity',)
        assert errors[0].type == 'greater_than'
        assert errors[0].ctx == {'gt': 0}
        assert errors[0].msg == 'Input should be greater than 0'

    @dependency()
    def tests_all_passed(self):
        ...
